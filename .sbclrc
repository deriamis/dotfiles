;; -*- mode: lisp-mode -*-
(defparameter *quicklisp-url* "https://beta.quicklisp.org/quicklisp.lisp")
(defparameter *quicklisp-file* (merge-pathnames "ql.lisp" (sb-ext:posix-getenv "TMPDIR")))
(defparameter *quicklisp-dir* (merge-pathnames ".quicklisp/" (user-homedir-pathname)))
(defparameter *quicklisp-init* (merge-pathnames "setup.lisp" *quicklisp-dir*))
(defparameter *env-path* (cond ((probe-file "/opt/local/bin/env")
                                ("/opt/local/bin/env"))
                               (t "/usr/bin/env")))

(defun exec-curl (&key url outfile)
  (sb-ext:run-program *env-path*
                      `("curl" "-s" "-o" ,(namestring outfile) ,url)
                      :input t :output t :wait t))

(defun download-file (&key url dest)
  (exec-curl :url url :outfile dest))

(defun download-quicklisp ()
  (download-file :url *quicklisp-url* :dest *quicklisp-file*))

(defun install-quicklisp (path)
  (funcall (find-symbol "INSTALL" :quicklisp-quickstart) :path path))

;; Load Quicklisp, initialize if missing.
(handler-case (load *quicklisp-init*)
  (sb-int:simple-file-error ()
    (download-quicklisp)
    (load *quicklisp-file*)
    (delete-file *quicklisp-file*)

    (install-quicklisp *quicklisp-dir*)
    (load *quicklisp-init*)

    (funcall (find-symbol "QUICKLOAD" :ql) "asdf")
    (funcall (find-symbol "QUICKLOAD" :ql) "cl-readline")
    (funcall (find-symbol "QUICKLOAD" :ql) "which")
    (funcall (find-symbol "QUICKLOAD" :ql) "cffi")))

#+asdf (require :asdf)

(when (asdf:find-system "cffi" nil)
  (asdf:load-system "cffi"))

(defun pkg-config-add-lib (libname)
 (let ((process (sb-ext:run-program *env-path*
                                    (list "pkg-config" libname "--libs-only-L")
                                    :input t :output :stream :wait t)))
  (let ((stream (sb-ext:process-output process)))
       (loop for line = (read-line stream nil nil)
        while line do
              ;; Drop "-L" part, and add '/' to the end. '/' IS necessary!
              (pushnew (pathname (concatenate 'string (subseq line 2) "/"))
                       cffi:*foreign-library-directories*))
       (sb-ext:process-close process))))

(pkg-config-add-lib "libssl")

;;; Use CLPM with default configuration.
;;;
;;; Generated by CLPM 0.4.1

#-clpm-client
(when (asdf:find-system "clpm-client" nil)
  ;; Load the CLPM client if we can find it.
  (asdf:load-system "clpm-client")
  (when (uiop:symbol-call :clpm-client '#:active-context)
    ;; If started inside a context (i.e., with `clpm exec` or `clpm bundle exec`),
    ;; activate ASDF integration
    (uiop:symbol-call :clpm-client '#:activate-asdf-integration)))

; vim: set filetype=lisp :
